{"version":3,"sources":["../../models/user.js"],"names":["UserSchema","ourtoken","type","String","unique","default","login","email","required","smscount","Number","confirmed","lastname","firstname","avatar","password","idvk","idfb","idinsta","idok","checkcode","online","Boolean","lastvisit","pre","next","isModified","genSalt","salt","hash","methods","comparePasswords","compare","model"],"mappings":";;;;;;AAGA;;;;AACA;;;;;;2cAJA;;;;;AAMA,IAAMA,aAAa,qBAAW;AAC1BC,cAAS,EAACC,MAAKC,MAAN,EAAaC,QAAO,KAApB,EAA0BC,SAAQ,CAAlC,EADiB;AAE1BC,WAAM,EAACJ,MAAKC,MAAN,EAAcC,QAAO,IAArB,EAFoB;AAG1BG,WAAO,EAACL,MAAKC,MAAN,EAAaK,UAAS,KAAtB,EAHmB;AAI1BC,cAAS,EAACP,MAAKQ,MAAN,EAAaL,SAAQ,CAArB,EAJiB;AAK1BM,eAAU,EAACT,MAAKQ,MAAN,EAAaL,SAAQ,CAArB,EALgB;AAM1BO,cAAS,EAACV,MAAKC,MAAN,EANiB;AAO1BU,eAAU,EAACX,MAAKC,MAAN,EAPgB;AAQ1BW,YAAO,EAACZ,MAAKC,MAAN,EAAaE,SAAQ,aAArB,EARmB;AAS1BU,cAAUZ,MATgB;AAU1Ba,UAAKb,MAVqB;AAW1Bc,UAAKd,MAXqB;AAY1Be,aAAQf,MAZkB;AAa1BgB,UAAKhB,MAbqB;AAc1BiB,eAAUjB,MAdgB;AAe1BkB,YAAOC,OAfmB;AAgB1BC,eAAUb;AAhBgB,CAAX,CAAnB;;AAmBAV,WAAWwB,GAAX,CAAe,MAAf;AAAA,yDAAsB,iBAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACjB,KAAKC,UAAL,CAAgB,UAAhB,CADiB;AAAA;AAAA;AAAA;;AAAA,yDAEXD,MAFW;;AAAA;AAAA;AAAA,+BAKH,iBAAOE,OAAP,CAAe,EAAf,CALG;;AAAA;AAKhBC,4BALgB;AAAA;AAAA,+BAMH,iBAAOC,IAAP,CAAY,KAAKd,QAAjB,EAA2Ba,IAA3B,CANG;;AAAA;AAMhBC,4BANgB;;;AAQtB,6BAAKd,QAAL,GAAgBc,IAAhB;AACAJ;;AATsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;;AAYAzB,WAAW8B,OAAX,CAAmBC,gBAAnB,GAAsC,UAAUhB,QAAV,EAAoB;AACtD,WAAO,iBAAOiB,OAAP,CAAejB,QAAf,EAAwB,KAAKA,QAA7B,CAAP;AACH,CAFD;;kBAIe,mBAASkB,KAAT,CAAe,MAAf,EAAuBjC,UAAvB,C","file":"user.js","sourcesContent":["/**\r\n * Created by Semyon on 30.03.2017.\r\n */\r\nimport mongoose, { Schema } from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst UserSchema = new Schema({\r\n    ourtoken:{type:String,unique:false,default:0},\r\n    login:{type:String, unique:true},\r\n    email: {type:String,required:false},\r\n    smscount:{type:Number,default:0},\r\n    confirmed:{type:Number,default:0},\r\n    lastname:{type:String},\r\n    firstname:{type:String},\r\n    avatar:{type:String,default:'default.jpg'},\r\n    password: String,\r\n    idvk:String,\r\n    idfb:String,\r\n    idinsta:String,\r\n    idok:String,\r\n    checkcode:String,\r\n    online:Boolean,\r\n    lastvisit:Number\r\n});\r\n\r\nUserSchema.pre('save',async function(next) {\r\nif (!this.isModified('password')){\r\n    return next();\r\n}\r\n\r\nconst salt = await bcrypt.genSalt(10);\r\nconst hash = await bcrypt.hash(this.password, salt);\r\n\r\nthis.password = hash;\r\nnext();\r\n});\r\n\r\nUserSchema.methods.comparePasswords = function (password) {\r\n    return bcrypt.compare(password,this.password);\r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"]}